% Read in signals
[yn, Fs1] = audioread('x_clean_notch.wav');
[xn, Fs2] = audioread('cleansignal.wav');
[xr, Fs3] = audioread('cleansignal_RLS512.wav');
assert( Fs1==Fs2 && Fs2==Fs3, 'Sampling rates must match.' );
Fs = Fs1;

% Create figure and 1Ã—3 tiled layout
fig = figure('Name','Notch vs NLMS vs RLS Comparison','NumberTitle','off');
t   = tiledlayout(fig, 1, 3, ...
       'TileSpacing','compact', ...
       'Padding','none');


% Panel 2: NLMS output
ax2 = nexttile(t, 2);
spectrogram(xn, 1024, 512, 1024, Fs,'yaxis');
title('NLMS-Filtered Signal');
xlabel('Time (s)');

% Panel 3: RLS output
ax3 = nexttile(t, 3);
spectrogram(xr, 1024, 512, 1024, Fs, 'yaxis');
title('RLS-Filtered Signal');
xlabel('Time (s)');

% Apply grayscale colormap to all
colormap(fig, 'gray');

% Fix dynamic range on each axis
for ax = [ax1, ax2, ax3]
    ax.CLim = [-150 -30];
end

% Single shared colorbar for the entire layout
cb = colorbar(ax3, 'eastoutside');
cb.Label.String = 'Power (dB)';
cb1 = colorbar(ax2, 'eastoutside');
cb1.Label.String = 'Power (dB)';

cb2 = colorbar(ax1, 'eastoutside');
cb2.Label.String = 'Power (dB)';

